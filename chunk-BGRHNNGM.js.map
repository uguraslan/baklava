{
  "version": 3,
  "sources": ["../node_modules/lit-html/src/directives/class-map.ts", "../node_modules/lit-html/src/directives/if-defined.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = <T>(value: T) => value ?? nothing;\n"],
  "mappings": "kEA2Ha,GAAW,EArGxB,aAAgC,EAAA,CAQ9B,YAAY,EAAA,CAAA,GAAA,GAEV,GADA,MAAM,CAAA,EAEJ,EAAS,OAAS,EAAS,WACT,AAAlB,EAAS,OAAS,SAAT,CACR,GAAA,EAAS,WADD,MACC,AAAA,IAAA,OAAA,OAAA,EAAS,QAAoB,EAEvC,KAAU,OACR,oGAAA,CAAA,CAMN,OAAO,EAAA,CAEL,MACE,IACA,OAAO,KAAK,CAAA,EACT,OAAQ,GAAQ,EAAU,EAAA,EAC1B,KAAK,GAAA,EACR,GAAA,CAIK,OAAO,EAAA,CAAsB,GAAA,CAAA,GAAA,GAAA,EAEpC,GAAA,AAAI,KAAK,KAAT,OAAyC,CACvC,KAAK,GAAmB,GAAI,KAAA,AACxB,EAAK,UADmB,QAE1B,MAAK,GAAiB,GAAI,KACxB,EAAK,QACF,KAAK,GAAA,EACL,MAAM,IAAA,EACN,OAAQ,GAAY,AAAN,IAAM,EAAN,CAAA,GAGrB,OAAW,KAAQ,GACb,EAAU,IAAA,CAA+B,GAArB,GAAA,KAAK,MAAgB,MAAhB,AAAgB,IAAhB,SAAgB,EAAA,IAAI,CAAA,IAC/C,KAAK,GAAiB,IAAI,CAAA,EAG9B,MAAO,MAAK,OAAO,CAAA,CAAA,CAGrB,GAAM,GAAY,EAAK,QAAQ,UAK/B,KAAK,GAAiB,QAAS,GAAA,CACvB,IAAQ,IACZ,GAAU,OAAO,CAAA,EACjB,KAAK,GAAkB,OAAO,CAAA,EAAA,CAAA,EAKlC,OAAW,KAAQ,GAAW,CAG5B,GAAM,GAAA,CAAA,CAAU,EAAU,GAExB,IAAU,KAAK,GAAiB,IAAI,CAAA,GACd,CAArB,GAAA,KAAK,MAAgB,MAAhB,AAAgB,IAAhB,OAAgB,OAAA,EAAA,IAAI,CAAA,IAEtB,GACF,GAAU,IAAI,CAAA,EACd,KAAK,GAAiB,IAAI,CAAA,GAE1B,GAAU,OAAO,CAAA,EACjB,KAAK,GAAiB,OAAO,CAAA,GAAA,CAInC,MAAO,EAAA,CAAA,CAAA,EC3FE,GAAA,GAAgB,GAAa,GAAS",
  "names": []
}
